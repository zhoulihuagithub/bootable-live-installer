ERR_INST_MEDIA=1
ERR_INV_INPUT=2
ERR_USR_PART_ABRT=3
ERR_UPGRADE_ABORT=4

handle_install_error()
{
	echo -n "PROJECTCELADON installation failed. "

	case $1 in
	$ERR_INST_MEDIA)
		echo "Failed to find installation media !!"
		;;
	$ERR_INV_INPUT)
		echo "User failed to give valid input !!"
		;;
	$ERR_USR_PART_ABRT)
		echo "User aborted partitioning !!"
		;;
	$ERR_UPGRADE_ABORT)
		echo "User aborted upgrade !!"
		;;
	esac

	echo -n "Press ENTER to run live version."
	read

	return 255
}

device=

bootloader=
bootloader2=

vbmeta=
vbmeta_b=
vbmeta_size=

boot=
boot_b=
boot_size=

tos=
tos_b=
tos_size=

system=
system_b=
system_size=

vendor=
vendor_b=
vendor_size=

misc=
misc_size=

metadata=
metadata_size=

recovery=
recovery_size=

cache=
config=
factory=

persistent=
teedata=

data=

install_kf=0

select_device()
{
	# Select the install device
	retry=3;
	devlist=`ls /sys/block | grep -v -E "loop|ram|sr|boot"`

	while [ $retry -gt 0 ]; do
		i=0
		list=
		for d in $devlist; do
			if [ $ROOT == $d ]; then
				continue
			fi

			if [ -n "$CI_BUILD" ]; then
				# Select the first device found
				device=$d
				return
			fi

			i=$(( i + 1 ))
			echo $i. $d
			list="$list$d "
		done

		if [ $i -eq 0 ];then
			return $ERR_INST_MEDIA
		fi

		retry=$(( retry - 1 ))
		echo -n "Select the device to install: "
		read ans
		if [ $ans -gt 0 -a $ans -le $i ]; then
			device=`echo $list | cut -d" " -f$ans`
			if [ "$device" == "$SYSTEM" ]; then
				echo -n "Already found projectceladon installed on $SYSTEM. Upgrade ? (y/n) :"
				read upg
				if [ $upg != "y" ]; then
					return $ERR_UPGRADE_ABORT
				fi
			fi
			return 0
		else
			echo "Input is not a valid number"; echo
		fi
	done

	return $ERR_INV_INPUT
}

# Start partition id = 0
num=0
# Start partition sector = 2048
start=2048
end=0

create_one_partition()
{
	partition_label=$1
	partition_len=$2
	partition_type=$3

	# Let the start address align with 1MB=2048 sectors
	start=$(( (start + 2047) / 2048 * 2048 ))

	if [ $part_len -eq -1 ]; then
		end=
	else
		end=$(( start + 1024 * 1024 * part_len / 512 - 1))
	fi

	echo "Creating $partition_label:$partition_len MB:$partition_type"

	sgdisk -n $num:$start:$end /dev/$device 1> /dev/null

	if [ $? -gt 0 ]; then
		exit 1
	fi

	sgdisk -c $num:$partition_label /dev/$device 1> /dev/null

	start=$(( end + 1 ))
}

prepare_partition()
{
	if [ -z "$CI_BUILD" ]; then
		echo -n "Auto partitioning /dev/$device. All data will be lost. Continue (y/[n]): "
		read ans
		if [ "$ans" != "y" ]; then
			return $ERR_USR_PART_ABRT
		fi

		echo -n "Are you sure (y/[n]): "
		read ans
		if [ "$ans" != "y" ]; then
			return $ERR_USR_PART_ABRT
		fi
	fi

	# unmount if already mounted
	mntpt=`mount | grep /dev/$device | cut -d" " -f3`
	if [ "$mntpt" != "" ]; then
		for m in $mntpt; do
			umount $m
		done
	fi

	dd if=/dev/zero of=/dev/$device bs=512 count=2048

	part_prefix=""
	ismmc=`echo $device | grep mmcblk`
	if [ -n "$ismmc" ]; then
		part_prefix="p"
	fi

	# Parse the gpt.ini file and create partitions
	gpt_file="gpt.$product.ini"
	section=$(gpt_parse_section $gpt_file base)
	partitions=$(gpt_get_section_field "$section" partitions)
	echo "partitions: $partitions"

	# Clear the partition table and recompute CHS
	sgdisk -oC /dev/$device 2> /dev/null

	for part in $partitions
	do
		num=$(( num + 1 ))
		echo "Partition $num: $part"
		section=$(gpt_parse_section $gpt_file "partition.$part")
		part_len=$(gpt_get_section_field "$section" "len")
		if [ "$part" == "data" ]; then
			if [ -z "$CI_BUILD" ]; then
				echo "Process the data partition"
				retry=3
				while [ $retry -gt 0 ]; do
					echo "How many GBs you want to used for data partition? -1 for all the free space"
					read ans
					if [ $ans -gt 0 -o $ans -eq -1 ]; then
						part_len=$(($ans * 1024))
						break
					fi
					retry=$(( retry - 1 ))
				done
			else
				echo "Set the data partition size to 10G"
				part_len=10240
			fi
		fi
		part_label=$(gpt_get_section_field "$section" "label")
		part_type=$(gpt_get_section_field "$section" "type")
		part_slot=$(gpt_get_section_field "$section" "has_slot")

		if [ "$part_slot" == "true" ]; then
			create_one_partition ${part_label}_a $part_len $part_type
			num=$(( num + 1 ))
			create_one_partition ${part_label}_b $part_len $part_type
		else
			create_one_partition $part_label $part_len $part_type
		fi

		if [ $part == "bootloader" ]; then
			bootloader=/dev/"$device"$part_prefix$num
			sgdisk -t $num:ef00 /dev/$device
		elif [ $part == "bootloader2" ]; then
			bootloader2=/dev/"$device"$part_prefix$num
			sgdisk -t $num:ef00 /dev/$device
		elif [ $part == "vbmeta" ]; then
			if [ "$part_slot" == "true" ]; then
				vbmeta=/dev/"$device"$part_prefix$((num - 1))
				vbmeta_b=/dev/"$device"$part_prefix$num
			else
				vbmeta=/dev/"$device"$part_prefix$num
			fi
			vbmeta_size=$part_len
		elif [ $part == "boot" ]; then
			if [ "$part_slot" == "true" ]; then
				boot=/dev/"$device"$part_prefix$((num - 1))
				boot_b=/dev/"$device"$part_prefix$num
			else
				boot=/dev/"$device"$part_prefix$num
			fi
			boot_size=$part_len
		elif [ $part == "tos" ]; then
			if [ "$part_slot" == "true" ]; then
				tos=/dev/"$device"$part_prefix$((num - 1))
				tos_b=/dev/"$device"$part_prefix$num
			else
				tos=/dev/"$device"$part_prefix$num
			fi
			tos_size=$part_len
		elif [ $part == "system" ]; then
			if [ "$part_slot" == "true" ]; then
				system=/dev/"$device"$part_prefix$((num - 1))
				system_b=/dev/"$device"$part_prefix$num
			else
				system=/dev/"$device"$part_prefix$num
			fi
			system_size=$part_len
		elif [ $part == "vendor" ]; then
			if [ "$part_slot" == "true" ]; then
				vendor=/dev/"$device"$part_prefix$((num - 1))
				vendor_b=/dev/"$device"$part_prefix$num
			else
				vendor=/dev/"$device"$part_prefix$num
			fi
			vendor_size=$part_len
		elif [ $part == "misc" ]; then
			misc=/dev/"$device"$part_prefix$num
			misc_size=$part_len
		elif [ $part == "metadata" ]; then
			metadata=/dev/"$device"$part_prefix$num
			metadata_size_size=$part_len
		elif [ $part == "recovery" ]; then
			recovery=/dev/"$device"$part_prefix$num
			recovery_size_size=$part_len
		elif [ $part == "persistent" ]; then
			persistent=/dev/"$device"$part_prefix$num
		elif [ $part == "cache" ]; then
			cache=/dev/"$device"$part_prefix$num
		elif [ $part == "config" ]; then
			config=/dev/"$device"$part_prefix$num
		elif [ $part == "factory" ]; then
			factory=/dev/"$device"$part_prefix$num
		elif [ $part == "teedata" ]; then
			teedata=/dev/"$device"$part_prefix$num
		elif [ $part == "data" ]; then
			data=/dev/"$device"$part_prefix$num
		fi
	done

	sgdisk -p /dev/$device

	# Sleep 3 seconds to wait for the /dev/sdax appear.
	sleep 3

	# In some case, the /dev/sda1 is not exist.
	if [ ! -e $boot ]; then
		echo "$boot is not exist, ... dropping to busybox ash."
		sh 2>&1
	fi

	# Format the partitions
	echo "Format bootloader $bootloader"
	mkfs.fat -n EFI $bootloader
	echo "Format bootloader2 $bootloader2"
	mkfs.fat -n EFI $bootloader2

	echo "Format data $data"
	yes | mkfs.ext4 -L DATA $data

	if [ "$cache" != "" ]; then
		echo "Format cache $cache"
		yes | mkfs.ext4 -L CACHE $cache
	fi
	echo "Format config $config"
	yes | mkfs.ext4 -L CONFIG $config
	echo "Format factory $factory"
	yes | mkfs.ext4 -L FACTORY $factory

	echo "Clear the misc and metadata partitions"
	# Clear some partition
	dd if=/dev/zero of=$misc bs=1M count=$misc_size 2> /dev/null
	dd if=/dev/zero of=$metadata bs=1M count=$metadata_size 2> /dev/null

	echo "Finish to prepare for the partitions"
}

show_progress()
{
	fileblock=$1
	while read i
	do
		outcnt=`echo $i | grep "out" | sed 's/ records.*$//' `
		if [ "$outcnt" = "" ]; then
			continue
		fi
		printf "%3d%%\b\b\b\b" $(( $(( $outcnt )) * 100 / $fileblock ))
	done
	echo ""
}

do_dd_copyfile()
{
	infile=$1
	outfile=$2

	filesize=`/bin/ls -l $infile | awk '{print $5}'`
	# Each block is 1M
	fileblock=$((($filesize + 1024 * 1024 - 1)/ 1024 / 1024 ))
	echo -n "Total $fileblock MB: "

	dd if=$infile of=$outfile bs=1M 2>&1 | show_progress $fileblock

	echo -n "Syncing ... "
	sync
	echo "Done."
}

do_actual_install()
{
	# Wait for $boot ready
	echo -n "Wait for $boot ready "
	while [ ! -e $boot ]
	do
		echo -n "."
		sleep 1
	done
	echo ""

	# Install GRUB2
	echo -n "Installing grub2 ... "
	mount $bootloader /scratchpad
	cp -dprf /mnt/boot /mnt/efi /mnt/kernel /mnt/initrd.img /mnt/ramdisk.img /scratchpad

	# update grub entries
	cat /proc/cmdline > .file
	sed -i 's/INSTALL=1//; s/LIVE=1//' .file
	cmdline=`cat .file`; rm .file
	serialno=`dmidecode --type system | grep Serial | cut -d" " -f3 | sed 's|:|0|g'`
	if [ ${#serialno} -lt 6 ]; then
		serialno=$(cat /dev/urandom | tr -cd 'a-zA-Z0-9' | head -c 20)
	fi
	snoparameter="androidboot.serialno=$serialno g_ffs.iSerialNumber=$serialno"
	cmdline="$cmdline $snoparameter"

	diskbus_id=$(readlink -f /sys/block/$device/ | cut -d: -f4 | cut -d'/' -f1)
	diskbus_param="androidboot.diskbus=$diskbus_id"
	cmdline="$cmdline $diskbus_param"

	echo "set timeout=10" > /scratchpad/boot/grub/grub.cfg

	if [ $install_kf -eq 1 ]; then
		cp -dprf /mnt/kernelflinger.efi /scratchpad

		echo "Add the menu for kernelflinger to GRUB"
		echo "menuentry 'PROJECTCELADON Kernelflinger' --class projectceladon {" >> /scratchpad/boot/grub/grub.cfg
		echo "	insmod part_gpt" >> /scratchpad/boot/grub/grub.cfg
		echo "	insmod chain" >> /scratchpad/boot/grub/grub.cfg
		echo "	chainloader /kernelflinger.efi" >> /scratchpad/boot/grub/grub.cfg
		echo "}" >> /scratchpad/boot/grub/grub.cfg
		echo "" >> /scratchpad/boot/grub/grub.cfg

		echo "menuentry 'PROJECTCELADON Kernelflinger Fastboot' --class projectceladon {" >> /scratchpad/boot/grub/grub.cfg
		echo "	insmod part_gpt" >> /scratchpad/boot/grub/grub.cfg
		echo "	insmod chain" >> /scratchpad/boot/grub/grub.cfg
		echo "	chainloader /kernelflinger.efi -f" >> /scratchpad/boot/grub/grub.cfg
		echo "}" >> /scratchpad/boot/grub/grub.cfg
		echo "" >> /scratchpad/boot/grub/grub.cfg
	fi

	if [ "$vbmeta" = "" ]; then
		echo "menuentry 'PROJECTCELADON Boot ($1)' --class projectceladon {" >> /scratchpad/boot/grub/grub.cfg
		echo "  linux /kernel $cmdline quiet" >> /scratchpad/boot/grub/grub.cfg
		echo "  initrd /ramdisk.img" >> /scratchpad/boot/grub/grub.cfg
		echo "}" >> /scratchpad/boot/grub/grub.cfg

		echo "" >> /scratchpad/boot/grub/grub.cfg

		echo "menuentry 'PROJECTCELADON Boot ($1) (w/ Console)' --class projectceladon {" >> /scratchpad/boot/grub/grub.cfg
		echo "  linux /kernel $cmdline ignore_loglevel debug SERIAL_PORT" | sed 's/ console=ttyS[^ ]*//g' >> /scratchpad/boot/grub/grub.cfg
		echo "  initrd /ramdisk.img" >> /scratchpad/boot/grub/grub.cfg
		echo "}" >> /scratchpad/boot/grub/grub.cfg

		echo "" >> /scratchpad/boot/grub/grub.cfg

		echo "menuentry 'PROJECTCELADON Boot ($1) (w/ Serial)' --class projectceladon {" >> /scratchpad/boot/grub/grub.cfg
		echo "  linux /kernel $cmdline ignore_loglevel debug SERIAL_PORT" | sed 's/ console=tty0//g' >> /scratchpad/boot/grub/grub.cfg
		echo "  initrd /ramdisk.img" >> /scratchpad/boot/grub/grub.cfg
		echo "}" >> /scratchpad/boot/grub/grub.cfg
	fi

	sync
	umount /scratchpad
	echo "Done."

	# Let the dd command to output the progress
	while true
	do
		killall -USR1 dd
		sleep 2
	done 2> /dev/null &
	sigpid=$!


	if [ $install_kf -eq 1 ]; then
		# Clear the whole boot partition at first
		dd if=/dev/zero of=$boot bs=1M count=$boot_size 2> /dev/null
		echo "Copy boot partition ... to $boot"
		do_dd_copyfile /mnt/boot.img $boot
		if [ "$boot_b" != "" ]; then
			dd if=/dev/zero of=$boot_b bs=1M count=$boot_size 2> /dev/null
			echo "Copy boot_b partition ... to $boot_b"
			do_dd_copyfile /mnt/boot.img $boot_b
		fi

		if [ "$tos" != "" ]; then
			echo "Copy tos partition ... to $tos"
			do_dd_copyfile /mnt/tos.img $tos
			if [ "$tos_b" != "" ]; then
				echo "Copy tos_b partition ... to $tos_b"
				do_dd_copyfile /mnt/tos.img $tos_b
			fi
		fi

		if [ "$vbmeta" != "" ]; then
			echo "Copy vbmeta partition ... to $vbmeta"
			do_dd_copyfile /mnt/vbmeta.img $vbmeta
			if [ "$vbmeta_b" != "" ]; then
				echo "Copy vbmeta_b partition ... to $vbmeta_b"
				do_dd_copyfile /mnt/vbmeta.img $vbmeta_b
			fi
		fi

		if [ "$recovery" != "" ]; then
			dd if=/dev/zero of=$recovery bs=1M count=$recoverysize 2> /dev/null
			echo "Copy recovery partition ... to $recovery"
			do_dd_copyfile /mnt/recovery.img $recovery
		fi
	fi

	# Install Android System
	echo "Copy system partition ... to $system"
	do_dd_copyfile /tmp/system-sq/system.unsparse $system
	if [ "$system_b" != "" ]; then
		echo "Copy system_b partition ... to $system_b"
		do_dd_copyfile /tmp/system-sq/system.unsparse $system_b
	fi

	# Install Android Vendor
	echo "Copy vendor partition ... $vendor"
	do_dd_copyfile /tmp/vendor-sq/vendor.unsparse $vendor
	if [ "$vendor_b" != "" ]; then
		echo "Copy vendor_b partition ... $vendor_b"
		do_dd_copyfile /tmp/vendor-sq/vendor.unsparse $vendor_b
	fi

	sync

	kill $sigpid
}

do_install()
{
	if [ $install_kf -eq 0 ]; then
		echo "Does not install kernelflinger"
	else
		echo "Install kernelflinger"
	fi

	select_device || handle_install_error $? || return $?

	prepare_partition $device || handle_install_error $? || return $?

	do_actual_install $1 || handle_install_error $? || return $?
}
